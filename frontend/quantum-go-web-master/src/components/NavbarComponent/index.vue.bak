<template>
  <nav class="navbar">
    <div class="logo" @click="logoClick">{{ lang.text.navbar.logo }}</div>
    <div class="nav-right">
      <button class="nav-button" @click="toggleBgm" style="display:none">
        <span>{{ bgmEnabled ? 'ðŸ”Š' : 'ðŸ”‡' }}</span>
      </button>
      <button class="nav-button" @click="changeLanguage">
        <!--        <t-icon name="translate-1" />-->
        <span>{{ lang.text.navbar.lang }}</span>
      </button>
      <button class="nav-button" @click="goToLeaderboard">
        <!--        <t-icon name="trophy" />-->
        <span>{{ lang.text.navbar.leaderboard }}</span>
      </button>
      <button class="nav-button" @click="handleShare">
        <!--        <t-icon name="share" />-->
        <span>{{ lang.text.navbar.share }}</span>
      </button>
      <el-dropdown v-if="user.isLogin" trigger="click" @command="onUserCommand">
        <button class="nav-button">
          <span>{{ user.name }}</span>
        </button>
        <template #dropdown>
          <el-dropdown-menu>
            <el-dropdown-item command="logout">Logout</el-dropdown-item>
          </el-dropdown-menu>
        </template>
      </el-dropdown>
      <button v-else class="nav-button" @click="handleLogin">
        <span>{{ lang.text.navbar.login }}</span>
      </button>
    </div>
  </nav>
</template>

<script setup lang="ts">
import { computed } from "vue";
import { useStore } from "vuex";
import { ElMessage, ElDropdown, ElDropdownMenu, ElDropdownItem } from "element-plus";
import { copyText } from "@/utils/tools";
import { useRouter } from 'vue-router';

const store = useStore();
const lang = computed(() => store.state.lang);
const user = computed(() => store.state.user);
const bgmEnabled = computed<boolean>(() => store.state.game.bgmEnabled);
const router = useRouter();

const logoClick = () => {
  router.push('/');
};

const changeLanguage = () => {
  store.commit("lang/changeLanguage");
};

const goToLeaderboard = () => {
  router.push('/leaderboard');
};

const handleShare = async () => {
  const roomId = store.state.game.roomId;
  if (roomId) {
    await copyText(store.state.lang.text.navbar.share_battle + window.location.origin + `/room/${roomId}`);
  } else {
    await copyText(store.state.lang.text.navbar.share_website + window.location.origin);
  }
  ElMessage({ message: lang.value.text.navbar.copy_success, grouping: true, type: "success" });
};

const handleLogin = () => {
  if (user.value.isLogin) {
    return;
  }
  router.push('/login');
};

const onUserCommand = async (cmd: string) => {
  if (cmd === 'logout') {
    await store.dispatch('user/logout');
    router.push('/');
  }
};

const toggleBgm = () => {
  store.commit('game/setBgmEnabled', !bgmEnabled.value);
};
</script>

<style scoped lang="scss">  
@use "./index.scss" as *;
</style>

